#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8
from config import *
from work import *

@bot.message_handler(content_types=["group_chat_created", "supergroup_chat_created"])
def groupChatCreated(message):
	start(message)

@bot.message_handler(content_types=["new_chat_members"])
def newChatMember(message):
	if (message.chat.type == 'group' or message.chat.type == 'supergroup') and (message.new_chat_member.id == bot.get_me().id): #or find_all_by_key(message.new_chat_members, "id", bot.get_me().id)):
		start(message)

@bot.message_handler(content_types=['text', 'voice', 'video', 'photo', 'document'])
def AllHandler(message):
	if message.chat.type == 'private':
		addUser(message.from_user.id)
	if (message.chat.type == 'supergroup' or message.chat.type == 'group') and gameIsExisted(message.chat.id) == 0 and getSpyID(message.chat.id) != None and (message.from_user.id,) not in getGamersByGroupId(message.chat.id):
		try:
			bot.delete_message(message.chat.id, message.message_id)
		except Exception:
			pass
		if message.chat.type == 'supergroup':
			try:
				bot.restrict_chat_member(message.chat.id, message.from_user.id, message.date + 30, can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False)
			except Exception:
				pass
	elif message.text == '/start' or message.text == '/start@findspy_bot':
		start(message)
	elif message.text == '/end' or message.text == '/end@findspy_bot':
		end(message)
	elif message.text == '/startpoll@findspy_bot' or message.text == '/startpoll':
		startPollNow(message)
	elif message.text == '/rules' or message.text == '/rules@findspy_bot':
		rules(message)
	elif message.text == '/game' or message.text == '/game@findspy_bot':
		game(message)
	elif message.text == '/answer' or message.text == '/answer@findspy_bot':
		answer(message)
	elif message.text == '/admword' and message.chat.type == 'private' and isMyAdmin(message.from_user.id) and getGroupbByUsersIDInGame(message.chat.id) != None:
		bot.send_message(message.chat.id, getGroupsWord(getGroupbByUsersIDInGame(message.chat.id)))
	elif message.text == '/settings' or message.text == '/settings@findspy_bot':
		settings(message)
	elif message.text == '/help' or message.text == '/help@findspy_bot':
		help(message)
	elif message.text == '/leave' or message.text == '/leave@findspy_bot':
		leave(message)
	elif message.text == '/offlinegame' or message.text == '/offlinegame@findspy_bot':
		offlineGame(message)
	elif message.text == '/admpanel' and isMyAdmin(message.from_user.id) and message.chat.type == 'private':
		adminPanel(message)

def adminPanel(message, message_id=0):
	key = types.InlineKeyboardMarkup()
	key.add(types.InlineKeyboardButton("Actual word", callback_data="admword"))
	key.add(types.InlineKeyboardButton("Get groups", callback_data="getgroups"))
	key.add(types.InlineKeyboardButton("Add word", callback_data="addword"))
	key.add(types.InlineKeyboardButton("Show words", callback_data="showords"))
	key.add(types.InlineKeyboardButton("Delete word", callback_data="delword"))
	key.add(types.InlineKeyboardButton("Number of users", callback_data="countgamers"))
	key.add(types.InlineKeyboardButton("GameRoom", callback_data="updategameroom"))
	key.add(types.InlineKeyboardButton("Mailing", callback_data="admrass"))
	if message_id == 0:
		bot.send_message(message.chat.id, "<b>Admin panel</b>", parse_mode='html', reply_markup=key)
	else:
		try:
			bot.edit_message_text("<b>Admin panel</b>", message.chat.id, message_id, parse_mode='html', reply_markup=key)
		except Exception:
			pass

# @bot.message_handler(commands=['start'])
def start(message):
	if message.chat.type == 'supergroup' or message.chat.type == 'group':
		key = types.InlineKeyboardMarkup()
		if addGroup(message.chat.id) == 0:
			admSettings(message.chat.id)
		if checkPermissions(message.chat.id) == 0:
			key.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame"))
			bot.send_message(message.chat.id, "<b>–í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞—Ç—å.</b>\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Å—Ç–∞—Ä—Ç—É–µ–º!", reply_markup=key, parse_mode='html')
		else:
			key.add(types.InlineKeyboardButton("‚úîÔ∏è", callback_data="permissions"))
			key.add(types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", url="t.me/findspy_bot"))
			bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã üïµÔ∏è‚Äç‚ôÇÔ∏è–®–ø–∏–æ–Ω.\n* –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—ã–¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n* –ê —á—Ç–æ–±—ã —è –º–æ–≥ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –∂–º–∏ \"–°—Ç–∞—Ä—Ç\".", reply_markup=key)
	elif message.chat.type == 'private':
		key = types.InlineKeyboardMarkup()
		key.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ—é –±–µ—Å–µ–¥—É", url="tg://resolve?domain=findspy_bot&startgroup="))
		if addUser(message.from_user.id) == 0:
			bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã üïµÔ∏è‚Äç‚ôÇÔ∏è–®–ø–∏–æ–Ω. –†–∞–¥, —á—Ç–æ –º—ã —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–∫–æ–º—ã!", reply_markup=key)
		else:
			bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã üïµÔ∏è‚Äç‚ôÇÔ∏è–®–ø–∏–æ–Ω.", reply_markup=key)
		help(message)

# @bot.message_handler(commands=['help'])
def help(message):
	key = types.InlineKeyboardMarkup()
	if message.chat.type == 'private':
		key.add(types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"))
	bot.send_message(message.chat.id, '<b>–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞?Ôøº</b>\n* –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–µ—Å–µ–¥—É\n* –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n* –ù–∞—á–∞—Ç—å –∏–≥—Ä—É /game\n\n–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–∞–∂–¥—ã–π, –∂–µ–ª–∞—é—â–∏–π –∏–≥—Ä–∞—Ç—å, –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –∫–æ –º–Ω–µ –≤ –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞–∂–∞—Ç—å "–°—Ç–∞—Ä—Ç".\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –∏–≥—Ä—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /rules.\n\n–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å–µ–¥—ã –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /settings.', parse_mode='html', reply_markup=key)

# @bot.message_handler(commands=['startpoll'])
def startPollNow(message):
	if (message.chat.type == 'supergroup'  or message.chat.type == 'group') and gameIsExisted(message.chat.id) == 0 and getPollStatus(message.chat.id) == 0 and getSpyID(message.chat.id) != None:
		individualPoll(message.chat.id)
		t = threading.Thread(target=whenToEndPoll, name="Thread2Poll{}".format(str(message.chat.id), args=(message.chat.id, getTimeAfterPoll(message.chat.id))))
		t.start()
	elif message.chat.type == 'private':
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")

# @bot.message_handler(commands=['game'])
def game(message):
	if (message.chat.type == 'supergroup'  or message.chat.type == 'group') and gameIsExisted(message.chat.id) == 1 and checkPermissions(message.chat.id) == 0 and getInviteID(message.chat.id) == None:
		key = types.InlineKeyboardMarkup()
		try:
			bot.send_message(message.from_user.id, '–í—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ {}'.format(bot.get_chat(message.chat.id).title))
		except Exception:
			key.add(types.InlineKeyboardButton("–í–æ–∑–æ–±–Ω–æ–≤–∏–º?", url="t.me/findspy_bot"))
			bot.send_message(message.chat.id, "<a href='tg://user?id={}'>{}</a> –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.".format(message.from_user.id, message.from_user.first_name), parse_mode='html', reply_markup=key)
			return
		key.add(types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data='connect'))
		invite_message = bot.send_message(message.chat.id, "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ!\n\n    –ò–≥—Ä–æ–∫–∏: <a href='tg://user?id={}'>{}</a>".format(message.from_user.id, message.from_user.first_name), parse_mode="html", reply_markup=key)
		try:
			bot.pin_chat_message(invite_message.chat.id, invite_message.message_id)
		except:
			pass
		inviteID(invite_message.chat.id, invite_message.message_id)
		if newGame(message.chat.id, message.from_user.id, message.from_user.first_name) == 2:
			btn = types.InlineKeyboardMarkup()
			btn.add(types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", url="t.me/findspy_bot"))
			bot.send_message(message.chat.id, "<a href='tg://user?id={}'>{}</a> –≤—Å–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ—à–µ–ª –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥!".format(message.from_user.id, message.from_user.first_name), parse_mode='html', reply_markup=btn)
			return
		t = threading.Thread(target=whenToEndInvite, name="Thread4Invite{}".format(str(message.chat.id)), args=(message.chat.id, getInviteTime(message.chat.id)))###################################################################################################################
		t.start()
		t.join()
		t._delete()
		if gameIsExisted(message.chat.id) == 0 and getSpyID(message.chat.id) == None:
			gameStarting(message.chat.id)
	elif message.chat.type == 'private':
		offlineGame(message)
	elif checkPermissions(message.chat.id) == 1:
		key = types.InlineKeyboardMarkup()
		key.add(types.InlineKeyboardButton("‚úîÔ∏è", callback_data="permissions"))
		bot.send_message(message.chat.id, "<b>–ü–æ—Ö–æ–∂–µ —è –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n* –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n* –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n* –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", parse_mode='html', reply_markup=key)

# @bot.message_handler(commands=['end'])
def end(message):
	if (message.chat.type == 'supergroup'  or message.chat.type == 'group') and gameIsExisted(message.chat.id) == 0 and (message.from_user.id in getAdmins(message.chat.id) or isMyAdmin(message.from_user.id)):
		bot.send_message(message.chat.id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
		endGame(message.chat.id)
	elif message.chat.type == 'private':
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")

# @bot.message_handler(commands=['rules'])
def rules(message):
	# bot.send_message(message.chat.id, '<b>–ü—Ä–∞–≤–∏–ª–∞</b>\n–í –∏–≥—Ä–µ —É—á–∞—Å—Ç–≤—É—é—Ç –º–µ—Å—Ç–Ω—ã–µ –∏ —à–ø–∏–æ–Ω—ã.\n–¶–µ–ª—å –∏–≥—Ä—ã:\n* –ú–µ—Å—Ç–Ω—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è–≤–∏—Ç—å —à–ø–∏–æ–Ω–∞.\n* –®–ø–∏–æ–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.\n–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –º–µ—Å—Ç–Ω—ã–º –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è, –®–ø–∏–æ–Ω—É ‚Äì –Ω–µ—Ç.\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å —à–ø–∏–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–≥–¥–∞ —Ç—ã –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ?"\n–ü—Ä–∞–≤–æ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—á–∞—é—â–µ–º—É.\n–í—ã —à–ø–∏–æ–Ω –∏ –¥–æ–≥–∞–¥—ã–≤–∞–µ—Ç–µ—Å—å –æ –∫–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å? –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫–æ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥, –∂–º–∏—Ç–µ /answer –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ —Å–ª–æ–≤–æ.\n–ï—Å–ª–∏ –∂–µ –≤—ã –º–µ—Å—Ç–Ω—ã–π –∏ —Å–æ—á–ª–∏ —á—å–∏-—Ç–æ –æ—Ç–≤–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ, –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /startpoll.\n–ò –ø–æ–º–Ω–∏—Ç–µ, –æ–¥–Ω–∞ –∏–≥—Ä–∞ ‚Äì –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!\n\n–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å–µ–¥—ã –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /settings.', parse_mode='html')
	bot.send_message(message.chat.id, '<b>–ü—Ä–∞–≤–∏–ª–∞</b>\n–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –±—É–¥–µ—Ç –∑–∞–Ω–æ—Å–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ–∫–∞–∑–∞—Ç—å—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –æ—Ç–µ–ª—è –∏–ª–∏ —É–Ω–∏–≤–µ—Ä–º–∞–≥–∞, —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —É–ª–µ—Ç–µ—Ç—å –≤ –∫–æ—Å–º–æ—Å –∏–ª–∏ –æ—á—É—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∏—Ä–∞—Ç—Å–∫–æ–º –∫–æ—Ä–∞–±–ª–µ. –ì—Ä–∞–Ω–∏—Ü—ã —à–∏—Ä–æ–∫–∏!\n–¶–µ–ª—å —à–ø–∏–æ–Ω–∞ ‚Äì —É–≥–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ.\n–¶–µ–ª—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äì —Ä–∞—Å–∫—Ä—ã—Ç—å —à–ø–∏–æ–Ω–∞.\n–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –æ –º–µ—Å—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ø–∞–ª–∏, –ø—ã—Ç–∞—è—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å–ø—Ä—è—Ç–∞–≤—à–µ–≥–æ—Å—è —Å—Ä–µ–¥–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —à–ø–∏–æ–Ω–∞. –û–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—Ç–æ –ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ–µ—Ç –≥–¥–µ –≤—ã –≤—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –æ–Ω –±—É–¥–µ—Ç —Å–ª—ã—à–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ –∏–Ω–æ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö. –ï—Å–ª–∏ –µ–º—É —É–¥–∞—Å—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø—Ä–µ–∂–¥–µ —á–µ–º –µ–≥–æ —Ä–∞—Å–∫—Ä–æ—é—Ç ‚Äì –æ–Ω –ø–æ–±–µ–¥–∏–ª!\n\n–ó–æ–≤–∏ –¥—Ä—É–∑–µ–π, –∏–≥—Ä–∞–π—Ç–µ, –æ–±–≤–∏–Ω—è–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –Ω–µ—Å–∏—Ç–µ —á—É—à—å –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ \"–®–ø–∏–æ–Ω\".', parse_mode='html')

# def admword(message):
# 	if isMyAdmin(message.from_user.id) and getGroupbByUsersIDInGame(message.chat.id) != None:
# 		bot.send_message(message.chat.id, getGroupsWord(getGroupbByUsersIDInGame(message.chat.id)))

def addword(message):
	if isMyAdmin(message.from_user.id):
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("INSERT INTO words (word) VALUES ('%s')" % (message.text))
		conn.commit()
		conn.close()
		bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ!")

def leave(message):
	if gameIsExisted(message.chat.id) == 0 and (message.chat.type == 'supergroup' or message.chat.type == 'group'):
		spyID = getSpyID(message.chat.id)
		if spyID == message.from_user.id:
			bot.send_message(message.chat.id, "<b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n* –®–ø–∏–æ–Ω <a href='tg://user?id={}'>{}</a> –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É.".format(message.from_user.id, message.from_user.first_name), parse_mode='html')
			endGame(message.chat.id)
		elif spyID == None and len(getGamersByGroupId(message.chat.id)) > 1:
			conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
			cursor = conn.cursor()
			cursor.execute("DELETE FROM gameroom WHERE userID = '%d'" % (message.from_user.id))
			conn.commit()
			conn.close()
			editInvite(message.chat.id)
			bot.send_message(message.chat.id, "* <a href='tg://user?id={}'>{}</a> –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É.".format(message.from_user.id, message.from_user.first_name), parse_mode='html')
		elif spyID == None and len(getGamersByGroupId(message.chat.id)) == 1:
			endGame(message.chat.id)
			bot.send_message(message.chat.id, "<b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n* <a href='tg://user?id={}'>{}</a> –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É.".format(message.from_user.id, message.from_user.first_name), parse_mode='html')
		elif spyID != message.from_user.id and len(getGamersByGroupId(message.chat.id)) == 4:
			bot.send_message(message.chat.id, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã.</b>\n* <a href='tg://user?id={}'>{}</a> –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É.".format(message.from_user.id, message.from_user.first_name), parse_mode='html')
			endGame(message.chat.id)
		elif spyID != message.from_user.id and len(getGamersByGroupId(message.chat.id)) > 4:
			conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
			cursor = conn.cursor()
			cursor.execute("DELETE FROM gameRoom WHERE userID = '%d'" % (message.from_user.id))
			# cursor.execute("DELETE FROM pieceID WHERE userID = '%d'" % (message.from_user.id))
			cursor.execute("DELETE FROM poll WHERE userID = '%d'" % (message.from_user.id))
			conn.commit()
			conn.close()
			bot.send_message(message.chat.id, "* <a href='tg://user?id={}'>{}</a> –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä—É.".format(message.from_user.id, message.from_user.first_name), parse_mode='html')
	elif message.chat.type == 'private':
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")

def delword(message):
	if isMyAdmin(message.from_user.id):
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("SELECT word FROM words WHERE word = '%s'" % (message.text))
		row = cursor.fetchone()
		if row == None:
			bot.send_message(message.from_user.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞!")
			conn.close()
		else:
			cursor.execute("DELETE FROM words WHERE word = '%s'" % (message.text))
			conn.commit()
			conn.close()
			bot.send_message(message.from_user.id, "–£–¥–∞–ª–µ–Ω–æ!")

# @bot.message_handler(commands=['answer'])
def answer(message):
	group_id = getGroupbByUsersIDInGame(message.from_user.id)
	if message.chat.type == 'private' and gameIsExisted(group_id) == 0 and getSpyID(group_id) != None and getSpyID(group_id) == message.from_user.id:
		bot.send_message(message.from_user.id, "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–æ, –∞ —è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—é!")
		bot.register_next_step_handler(message, checkingAnswer, group_id)
	elif message.chat.type == 'group' or message.chat.type == 'supergroup':
		try:
			bot.delete_message(message.chat.id, message.message_id)
		except Exception:
			pass
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /answer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.")
	else:
		bot.send_message(message.from_user.id, "–¢—ã –Ω–µ —à–ø–∏–æ–Ω –∏–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")


def settings(message):
	if message.chat.type == 'private' and isCreatorForSettings(message.chat.id):
		key = types.InlineKeyboardMarkup()
		for i in getCreatorsGroups(message.chat.id):
			key.add(types.InlineKeyboardButton(text=bot.get_chat(i[0]).title, callback_data=str(i[0]) + "settings"))
		bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç", reply_markup=key)
	elif message.chat.type == 'private':
		bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –±–µ—Å–µ–¥—ã!")
	else:
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–µ—Å–µ–¥—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ!")

def admrass(message):
	if message.text == "/cancel":
		return
	bot.send_message(message.from_user.id, "–ü—Ä–∏—Å—ã–ª–∞–π –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–∫–Ω–æ–ø–∫–∞1 ‚ûñ callback_data1\n–∫–Ω–æ–ø–∫–∞1 ‚ûñ callback_data1\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
	bot.register_next_step_handler(message, getMessageCallback, message.text)

# @bot.message_handler(commands=['offlinegame'])
def offlineGame(message):
	if message.chat.type == 'private':
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("SELECT * FROM offlineGame WHERE userID = '%d'" % (message.chat.id))
		if cursor.fetchone() != None:
			conn.close()
			key = types.InlineKeyboardMarkup()
			key.add(types.InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="edittooffline"))
			# key.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="delete_message"))
			old_message = bot.send_message(message.chat.id, "<b>–û—Ñ—Ñ–ª–∞–π–Ω –∏–≥—Ä–∞</b>\n–ù–∞—á–Ω–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É?", reply_markup=key, parse_mode='html')
		else:
			conn.close()
			old_message = bot.send_message(message.chat.id, "<b>–û—Ñ—Ñ–ª–∞–π–Ω –∏–≥—Ä–∞</b>\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parse_mode='html')
			bot.register_next_step_handler(message, numGamersForOFflineGame, old_message.chat.id, old_message.message_id)
	else:
		bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.")

@bot.callback_query_handler(func=lambda c:True)
def inline(c):
	print(c.data)
	if c.data == 'permissions':
		key = types.InlineKeyboardMarkup()
		if checkPermissions(c.message.chat.id) == 0:
			key = types.InlineKeyboardMarkup()
			key.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame"))
			bot.send_message(c.message.chat.id, "<b>–í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞—Ç—å.</b>\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Å—Ç–∞—Ä—Ç—É–µ–º!", reply_markup=key, parse_mode='html')
		else:
			key.add(types.InlineKeyboardButton("‚úîÔ∏è", callback_data="permissions"))
			bot.send_message(c.message.chat.id, "<b>–ü–æ—Ö–æ–∂–µ —è –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n* –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n* –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n* –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", parse_mode='html', reply_markup=key)
	elif c.data == 'connect':
		if checkPermissions(c.message.chat.id) == 0:
			addReturn = addUserToGame(c.message.chat.id, c.from_user.id, c.from_user.first_name)
			if addReturn == 3:
				try:
					bot.delete_message(c.message.chat.id, c.message.message_id)
				except Exception:
					pass
				return
			elif addReturn == 1:
				return
			elif addReturn == 2:
				key = types.InlineKeyboardMarkup()
				key.add(types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", url="t.me/findspy_bot"))
				bot.send_message(c.message.chat.id, "<a href='tg://user?id={}'>{}</a> –≤—Å–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ—à–µ–ª –≤ –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥—é".format(c.from_user.id, c.from_user.first_name), parse_mode='html', reply_markup=key)
				return
			elif addReturn == 4:
				key = types.InlineKeyboardMarkup()
				key.add(types.InlineKeyboardButton("–í–æ–∑–æ–±–Ω–æ–≤–∏–º?", url="t.me/findspy_bot"))
				bot.send_message(c.message.chat.id, "<a href='tg://user?id={}'>{}</a> –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥.".format(c.from_user.id, c.from_user.first_name), parse_mode='html', reply_markup=key)
				return
			editInvite(c.message.chat.id)
		else:
			key = types.InlineKeyboardMarkup()
			key.add(types.InlineKeyboardButton("‚úîÔ∏è", callback_data="permissions"))
			bot.send_message(c.message.chat.id, "<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n* –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n* –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n* –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", parse_mode='html', reply_markup=key)
			try:
				bot.delete_message(c.message.chat.id, getInviteID(c.message.chat.id))
			except Exception:
				pass
			endGame(c.message.chat.id)
	elif c.data == "groupsettings":
		changeToSettings("–í—ã–±–µ—Ä–∏—Ç–µ", c.message.chat.id, c.message.message_id)
	elif c.data == "feedback":
		bot.send_message(c.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		bot.register_next_step_handler(c.message, feedback)
	elif c.data == "updategameroom":
		showgameroom(c.message, c.message.message_id)
	elif c.data == "skipinvite":
		gameStarting(c.message.chat.id)
	elif c.data == "edittooffline":
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("DELETE FROM offlineGame WHERE userID = '%d'" % (c.message.chat.id))
		conn.commit()
		conn.close()
		try:
			bot.edit_message_text("<b>–û—Ñ—Ñ–ª–∞–π–Ω –∏–≥—Ä–∞</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", c.message.chat.id, c.message.message_id, parse_mode='html')
		except Exception:
			pass
		bot.register_next_step_handler(c.message, numGamersForOFflineGame, c.message.chat.id, c.message.message_id)
	elif c.data == "delete_message":
		try:
			bot.delete_message(c.message.chat.id, c.message.message_id)
		except Exception:
			pass
	elif c.data == "rolesgiven":
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("UPDATE offlineGame SET startTime = '%d' WHERE userID = '%d'" % (c.message.date, c.message.chat.id))
		conn.commit()
		cursor.execute("SELECT time FROM offlineGame WHERE userID = '%d'" % (c.message.chat.id))
		endTime = cursor.fetchone()[0]
		conn.close()
		key = types.InlineKeyboardMarkup()
		key.add(types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É", callback_data="endofflinegame"))
		try:
			bot.edit_message_text("<b>–û—Ñ—Ñ–ª–∞–π–Ω –∏–≥—Ä–∞</b>\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!\n–£—Å–ø–µ–π—Ç–µ –≤—ã—á–∏—Å–ª–∏—Ç—å –®–ø–∏–æ–Ω–∞ –ø—Ä–µ–∂–¥–µ, —á–µ–º –∏—Å—Ç–µ—á–µ—Ç –≤—Ä–µ–º—è, –∏–Ω–∞—á–µ –æ–Ω –ø–æ–±–µ–¥–∏—Ç.", c.message.chat.id, c.message.message_id, reply_markup=key, parse_mode='html')
		except Exception:
			pass
		t = threading.Thread(target=whenToEndOfflineGame, name="Threadoffline{}".format(str(c.message.chat.id)), args=(c.message.chat.id, c.message.date, endTime))###################################################################################################################
		t.start()
		t.join()
		offlineGameEnd(c.message.chat.id, c.message.message_id, c.message.date)
	elif c.data == "endofflinegame":
		offlineGameEnd(c.message.chat.id, c.message.message_id, None)
	elif c.data == 'getgroups':
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("SELECT COUNT(*) FROM groups")
		groups = cursor.fetchone()
		cursor.execute("SELECT grpID FROM groups")
		word = cursor.fetchone()
		text = ""
		while word != None:
			try:
				text += (bot.get_chat(word[0]).title + "\n")
			except Exception:
				text += "no title\n"
			word = cursor.fetchone()
		conn.close()
		bot.send_message(c.message.chat.id, "<b>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø ‚Äì {}</b>\n{}".format(groups[0], text), parse_mode="html")
	elif c.data == 'addword':
		bot.send_message(c.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ!")
		bot.register_next_step_handler(c.message, addword)
	elif c.data == 'showords':
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("SELECT word FROM words")
		word = cursor.fetchone()
		text = ""
		while word != None:
			text += (word[0] + "\n")
			word = cursor.fetchone()
		conn.close()
		bot.send_message(c.message.chat.id, "<b>–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤\n</b>" + text, parse_mode="html")
	elif c.data == 'delword':
		bot.send_message(c.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π —Å–ª–æ–≤–æ", parse_mode="html")
		bot.register_next_step_handler(c.message, delword)
	elif c.data == 'countgamers':
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("SELECT COUNT(*) FROM users")
		gamers = cursor.fetchone()
		conn.close()
		bot.send_message(c.message.chat.id, "<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ ‚Äì " + str(gamers[0]) + " —á–µ–ª–æ–≤–µ–∫(–∞)</b>", parse_mode="html")
	elif c.data == 'admrass':
		bot.send_message(c.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
		bot.register_next_step_handler(c.message, admrass)
	elif c.data == 'admpanel':
		adminPanel(c.message, c.message.message_id)
	elif c.data == "startgame":
		try:
			bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
		except Exception:
			pass
		try:
			bot.delete_message(c.message.chat.id, c.message.message_id)
		except Exception:
			pass
		if getInviteID(c.message.chat.id) == None:
			c.message.from_user = c.from_user
			game(c.message)
	elif c.data == 'answerfromspy':
		group_id = getGroupbByUsersIDInGame(c.from_user.id)
		if c.message.chat.type == 'private' and gameIsExisted(group_id) == 0 and getSpyID(group_id) != None and getSpyID(group_id) == c.from_user.id:
			bot.send_message(c.from_user.id, "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–ª–æ–≤–æ, –∞ —è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—é!")
			bot.register_next_step_handler(c.message, checkingAnswer, group_id)
		else:
			bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
	elif c.data == "newwordfromuser":
		bot.send_message(c.from_user.id, "–ü—Ä–∏—Å—ã–ª–∞–π –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é, –∞ —è –æ–±—Å—É–∂—É –µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
		bot.register_next_step_handler(c.message, checkNewWord)
	elif "_addingword" in c.data:
		word = c.data.split('_')[0]
		if isMyAdmin(c.from_user.id):
			conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
			try:
				cursor = conn.cursor()
				cursor.execute("INSERT INTO words (word) VALUES ('%s')" % (word))
				conn.commit()
				bot.send_message(c.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ!")
			except Exception as e:
				bot.send_message(144589481, str(e))
			conn.close()
	elif "waitrole" in c.data:
		id = getNumberFromCall(c.data, 'w')
		key = types.InlineKeyboardMarkup()
		key.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤", callback_data=str(id)+"offlinerole"))
		try:
			bot.edit_message_text("–î–µ—Ä–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –Ω–µ –≤–∏–¥–µ–ª–∏ –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º—Å—è.", c.message.chat.id, c.message.message_id, reply_markup=key, parse_mode='html')
		except Exception:
			pass
	elif "offlinerole" in c.data:
		startOfflineGame(c.message.chat.id, c.message.message_id, getNumberFromCall(c.data, "o"))
	elif "offlinetime" in c.data:
		offlineTime = getNumberFromCall(c.data, 'o')
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("UPDATE offlineGame SET time = '%d' WHERE userID = '%d'" % (offlineTime * 60, c.message.chat.id))
		conn.commit()
		conn.close()
		setOfflineSpy(c.message.chat.id, c.message.message_id)
	elif "answer2user" in c.data:
		bot.send_message(c.message.chat.id, "–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		bot.register_next_step_handler(c.message, answerToUser, c.data)
	elif "settings" in c.data:
		editToGroupSettings(c.data, c.message.chat.id, c.message.message_id)
	elif "poll" in c.data:
		try:
			bot.edit_message_text("–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä!", c.message.chat.id, c.message.message_id)
		except Exception:
			pass
		finally:
			pollHandler(getGroupbByUsersIDInGame(c.from_user.id), c.from_user.id, c.data)
	elif "maxgamers" in c.data:
		changeMaxGamers(c.message, c.data, c.message.chat.id, c.message.message_id)
	elif "inviting" in c.data:
		changeInviteTime(c.message, c.data, c.message.chat.id, c.message.message_id)
	elif "chinvite" in c.data:
		newTime = getNumberFromCall(c.data, "_")
		group_id = getNumberFromLetterToCall(c.data, "_", "c")
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("UPDATE settings SET inviteTime = '%d' WHERE grpID = '%d'" % (int(newTime), group_id))
		conn.commit()
		conn.close()
		changeToSettings("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.", c.message.chat.id, c.message.message_id)
	elif "chtime" in c.data:
		newTime = getNumberFromCall(c.data, "_")
		group_id = getNumberFromLetterToCall(c.data, "_", "c")
		conn = sqlite3.connect('baza.sqlite', check_same_thread=False)
		cursor = conn.cursor()
		cursor.execute("UPDATE settings SET time = '%d' WHERE grpID = '%d'" % (int(newTime), group_id))
		conn.commit()
		conn.close()
		changeToSettings("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∞.", c.message.chat.id, c.message.message_id)
	elif "time" in c.data:
		changeMaxTime(c.message, c.data, c.message.chat.id, c.message.message_id)
	elif "cleancache" in c.data:
		group_id = getNumberFromCall(c.data, "c")
		endGame(group_id)
		showgameroom(c.message, c.message.message_id)


bot.send_message(144589481, "polling restart")
try:
	bot.polling(none_stop=True)
except Exception as e:
	bot.send_message(144589481, e)
